!!! 5
//if lt IE 7
    <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en">
//if IE 7
    <html class="no-js lt-ie9 lt-ie8" lang="en">
//if IE 8
    <html class="no-js lt-ie9" lang="en">
//[if gt IE 8]><!
html(class='no-js', lang='en')
    //<![endif]
    head
        script(src="../W.js")
        script(src="../W.Object.js")
        script(src="../W.DisplayViewMixin.js")
    body
        script
            //
            // create the canvas elemnt and add it
            var canvasEl = document.createElement("canvas");
            canvasEl.width = 400;
            canvasEl.height = 200;
            document.body.appendChild(canvasEl);

            // Canvas View
            var MyCanvasView = W.Object.extend({
                constructor : function (options) {
                    // give us x, y, width, and height
                    W.extend(this, W.DisplayViewMixin);
                    // set the width and height to the canvas tag
                    // setSize accepts an el as an argument and will
                    // match the size of the passed el
                    this.setSize(canvasEl);
                },
                draw : function () {
                    // draw the other views
                    backgroundView.draw();
                    pinkBlockView.draw();
                }
            });

            // Background View
            var MyBackgroundView = W.Object.extend({
                constructor : function (options) {
                    W.extend(this, W.DisplayViewMixin);
                    // we want this to have the same size as the canvas view
                    // as it fills the whole canvas
                    // set the size to be the same as the canvasView
                    // setSize accepts an object as an argument and will
                    // look for x and y properties, or, x and y functions
                    this.setSize(canvasView);
                },
                draw : function () {
                    drawRect(this.x(), this.y(), this.width(), this.height(), "#00bfff");
                }
            });
            

            // Pink Block View
            var MyPinkBlockView = W.Object.extend({
                constructor : function (options) {
                    W.extend(this, W.DisplayViewMixin);
                },
                draw : function () {
                    drawRect(this.x(), this.y(), this.width(), this.height(), "#e5028c");
                }
            });

            ////
            /// Create views and size the pink view
            //
            var canvasView = new MyCanvasView();
            var backgroundView = new MyBackgroundView();
            var pinkBlockView = new MyPinkBlockView();

            pinkBlockView.setPosition(172,89);
            pinkBlockView.setSize(180,77);

            canvasView.draw();

            // Draw Rect Util
            function drawRect(x, y, width, height, color) {
                var context = canvasEl.getContext('2d');
                console.log(arguments);
                context.fillStyle = color;
                context.beginPath();
                context.moveTo(x, y);
                context.lineTo(x+width, y);
                context.lineTo(x+width, y+height);
                context.lineTo(x, y+height);
                context.lineTo(x, y);
                context.closePath();
                context.fill();
            }
            //
